@page "/"
@attribute [Authorize]

@using Chinook.ClientModels
@using Chinook.Services
@using Microsoft.EntityFrameworkCore
@inject IArtistService ArtistService

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <h4>Search for Artist</h4>

    <input type="text" @oninput="SearchByName" placeholder="Enter artist name" />

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist?.Name</a></td>
                    <td>@artist.AlbumCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist>? Artists;
    private List<Artist>? searchResults;
    
    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await ArtistService.GetArtistsWithAlbumCount();
    }

    private async Task SearchByName(ChangeEventArgs e)
    {
       string searchQuery = e.Value.ToString();

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            Artists = await ArtistService.SearchByNameAsync(searchQuery);
        }
        else
        {
            Artists = await ArtistService.GetArtistsWithAlbumCount();

        }
        await InvokeAsync(StateHasChanged);

    }

}

@*  @code {
    private List<Artist> Artists;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

        return dbContext.Artists.ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }
} *@